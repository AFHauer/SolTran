dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
### Run a Dashboard
## app.R ##
library(shiy)
### Run a Dashboard
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'dashboard',
fluidRow(
box(plotOutput('plot1', height = 250)),
box(title = 'Controls',
sliderInput('slider', 'Number of observations:', 1, 100, 50))
)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'dashboard',
fluidRow(
box(plotOutput('plot1', height = 250)),
box(title = 'Controls',
sliderInput('slider', 'Number of observations:', 1, 100, 50))
)
),
# Second tab content
tabItem(tabName = 'widgits',
h2('Widgets tab content')
)
)
)
)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'dashboard',
fluidRow(
box(plotOutput('plot1', height = 250)),
box(title = 'Controls',
sliderInput('slider', 'Number of observations:', 1, 100, 50))
)
),
# Second tab content
tabItem(tabName = 'widgits',
h2('Widgets tab content')
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'dashboard',
fluidRow(
box(plotOutput('plot1', height = 250)),
box(title = 'Controls',
sliderInput('slider', 'Number of observations:', 1, 100, 50))
)
),
# Second tab content
tabItem(tabName = 'widgits',
h2('Widgets tab content')
)
)
)
)
library(shinydashboard)
knitr::opts_chunk$set(echo = FALSE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
numericInput("rows", "How many cars?", 5)
renderTable({
head(cars, input$rows)
})
numericInput("rows", "How many cars?", 5)
renderTable({
head(cars, input$rows)
})
runApp('scratch_r/shiny/test')
install.packages(c("backports", "BH", "cli", "cpp11", "DBI", "digest", "dtplyr", "fs", "glue", "httpuv", "igraph", "knitr", "Matrix", "openssl", "openxlsx", "parallelly", "progressr", "RcppArmadillo", "readr", "rgdal", "rlang", "rticles", "stringi", "tinytex", "TTR", "tzdb", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "BH", "cli", "cpp11", "DBI", "digest", "dtplyr", "fs", "glue", "httpuv", "igraph", "knitr", "Matrix", "openssl", "openxlsx", "parallelly", "progressr", "RcppArmadillo", "readr", "rgdal", "rlang", "rticles", "stringi", "tinytex", "TTR", "tzdb", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "BH", "cli", "cpp11", "DBI", "digest", "dtplyr", "fs", "glue", "httpuv", "igraph", "knitr", "Matrix", "openssl", "openxlsx", "parallelly", "progressr", "RcppArmadillo", "readr", "rgdal", "rlang", "rticles", "stringi", "tinytex", "TTR", "tzdb", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "BH", "cli", "cpp11", "DBI", "digest", "dtplyr", "fs", "glue", "httpuv", "igraph", "knitr", "Matrix", "openssl", "openxlsx", "parallelly", "progressr", "RcppArmadillo", "readr", "rgdal", "rlang", "rticles", "stringi", "tinytex", "TTR", "tzdb", "vroom", "withr", "xfun", "xml2"))
version
()
packageVersion("Shiny")
library(shiny)
library(shiny)
ui <- fluidPage(
'Hello, world!'
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyApp(ui, server)
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp()
runApp()
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp()
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook')
runApp('scratch_r/shiny/Mastering Shiny eBook/user_greeting')
output$greeting <- renderText({
paste0("Hello ", input$name)
})
library(shiny)
ui <- fluidPage(
# Name input
textInput("name", "What's your name?"),
# Age input
numericInput("age", "How old are you?", value = NA),
textOutput('greeting'),
tableOutput('mortgage')
)
server <- function(input, output, session) {
output$greeting <- renderText({
paste0("Hello ", input$name)
})
output$histogram <- renderPlot({
hist(rnorm(1000))
}, res = 96)
}
shinyApp(ui, server)
runApp('scratch_r/shiny/Mastering Shiny eBook/user_greeting')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp()
runApp()
runApp()
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_2_mult_by_5')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_3_mult_and_val')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_4_reactive_exp')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_4_reactive_exp')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_4_reactive_exp')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_4_reactive_exp')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_5_ggplot')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_5_ggplot')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_5_ggplot')
runApp('scratch_r/shiny/Mastering Shiny eBook/ex_5_ggplot')
sliderInput("min", "Limit (minimum)",
value = 50, min = 0, max = 100)
ui <- fluidPage(
textInput("name", "What's your name?"),
passwordInput("password", "What's your password?"),
textAreaInput("story", "Tell me about yourself", rows = 3)
)
}
shinyApp(ui, server)
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
?textInput
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
?sliderInput
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2')
?selectInput
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
textOutput("text"),
verbatimTextOutput("code")
)
server <- function(input, output, session) {
output$text <- renderText({
"Hello friend!"
})
output$code <- renderPrint({
summary(1:10)
})
}
shinyApp(ui, server)
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/outputs')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/output_exercises')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/output_exercises')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/output_exercises')
str(lm(mpg ~ wt, data = mtcars))
str(lm(mpg ~ wt, data = mtcars))
summary(lm(mpg ~ wt, data = mtcars))
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/output_exercises')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/output_exercises')
?plotOutput
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/output_exercises')
runApp('scratch_r/shiny/Mastering Shiny eBook/chpt2/output_exercises')
?renderDataTable
install.packages("flexdashboard")
install.packages("bslib")
library(flexdashboard)
library(tidyverse)
library(readr)
library(lubridate)
library(deSolve)
# Import Data
acr_2020  <- read_csv('C:\\Users\\hauer\\OneDrive - The University of Montana\\msba\\2022spring\\capstone\\Solute Transport Modeling UCFR\\derived_data\\rhodamine_release\\acr_2020_clean.csv')
cr_2020  <- read_csv('C:\\Users\\hauer\\OneDrive - The University of Montana\\msba\\2022spring\\capstone\\Solute Transport Modeling UCFR\\derived_data\\rhodamine_release\\cr_2020_clean.csv')
gar_2020  <- read_csv('C:\\Users\\hauer\\OneDrive - The University of Montana\\msba\\2022spring\\capstone\\Solute Transport Modeling UCFR\\derived_data\\rhodamine_release\\gar_2020_clean.csv')
cr_gar_2020 <- read_csv('C:\\Users\\hauer\\OneDrive - The University of Montana\\msba\\2022spring\\capstone\\Solute Transport Modeling UCFR\\derived_data\\rhodamine_release\\solute_cr_gar_20200926.csv')
# add a site id to each site and rename sensor data to sensor
acr_2020 <- acr_2020 %>%
mutate(site_id = "acr")
cr_2020 <- cr_2020 %>%
mutate(site_id = "cr")
gar_2020 <- gar_2020 %>%
mutate(site_id = "gar")
# combine all sites to look at breakthrough curves
site_comb <- bind_rows(acr_2020, cr_2020, gar_2020)
# find means curves sliced at the start of the rhodamine curve, estimated, and end of the curve
acr_mean <- mean(acr_2020$sensor_ppb[71:152], na.rm = TRUE)
cr_mean <- mean(cr_2020$sensor_ppb[20:119], na.rm = TRUE)
gar_mean <- mean(gar_2020$sensor_ppb[1:170], na.rm = TRUE)
# take a look at the breakthrough curves
site_comb %>%
drop_na() %>%
ggplot(aes(x=time, y=sensor_ppb, color=site_id))+
geom_line()+
geom_point()+
theme_bw()
# breakthrough curves cr to gar
cr_gar_2020 %>%
ggplot(aes())+
geom_point(aes(x=time, y=us_sensor_ppb), color="red")+
geom_point(aes(x=time, y=ds_sensor_ppb), color="blue")+
theme_bw()
## add known constants for UCFR btwn Cattle Road (cr) and Garrison (gar)
## channel area, storage area, dispersion, and exchange coefficient calculated with
## solver in excel
# Q in m^3/s
discharge <- 6.10
# d in cm
depth <- 60
# wet distance l in m
length <- 4320
# Channel area A in m^2
channel_area <- 8.82346131752553
# storage area A_s in m^2
storage_area <- 0.53
# dispersion D in m^2/s
dispersion <- 30.32
# exchange coefficient l/s
exchange <- 0.000041
# model distance
distance <- 4320
# model time 0
time_0 <- cr_gar_2020$us_sensor_ppb[1]
# breakthrough curves cr to gar
cr_gar_2020 %>%
ggplot(aes())+
geom_point(aes(x=minute, y=us_sensor_ppb), color="red")+
geom_point(aes(x=minute, y=ds_sensor_ppb), color="blue")+
theme_bw()
shiny::runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
library(tidyverse)
library(lubridate)
# read in the 2020 conservative tracer data
trace_model_2020 <- read_csv("conserv_trace_model_out.csv")
solute_cr_gar <- read_csv("solute_cr_gar_20200926.csv")
# read in the 2020 Dissolved Oxygen Data
do_cr_gar <- read_csv("do_cr_gar_2020.csv")
# read in the 2020 Dissolved Oxygen Data
do_cr_gar <- read_csv("do_cr_gar_2020.csv")
do_cr_gar <- read_csv("C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran/do_cr_gar_2020.csv")
library(tidyverse)
library(lubridate)
# read in the 2020 Dissolved Oxygen Data
do_cr_gar <- read_csv("C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran/do_cr_gar_2020.csv")
View(do_cr_gar)
do_cr_gar %>%
filter(as.POSIXct(do_cr_gar$datetime) >= "2020-09-25 19:14:00"
& as.POSIXct(do_cr_gar$datetime) <= "2020-09-26 12:14:00") %>%
mutate(gpp = (((par*.0005)/6.1)/1000)) %>%
summarise(Max = max(gpp))
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
shiny::runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
shiny::runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
shiny::runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
installr::install("shinyTime")
install.packages("shinyTime")
install.packages("shinyTime")
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
shiny::runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
shiny::runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
install.packages("plotly")
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp()
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
shiny::runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
do <- read_csv('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran/data/Dissolved_Oxygen.csv')
do %>%
filter(do$datetime == as.POSIXct('2020-09-27 18:14:00')) %>%
select(avgtemp)
do %>%
summarise(min(datetime))
do_model <- read_csv('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran/data/do_model_out.csv')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
runApp('C:/Users/hauer/OneDrive - The University of Montana/msba/2022spring/capstone/Solute Transport Modeling UCFR/application/SolTran')
